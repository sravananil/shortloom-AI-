// import React from 'react';
// ...existing code from Authentication Functions imp.txt...
// (The full EnhancedGeneratedShorts code is already provided in your attachment)

// Paste the full code from Authentication Functions imp.txt here

// --- Begin pasted code ---
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Download, Share2, Copy, Heart, MessageCircle, Send, Sparkles, TrendingUp, Hash, FileText } from 'lucide-react';

// AI Generated Content interface
interface AIGeneratedContent {
  title: string;
  description: string;
  hashtags: string[];
  engagement: {
    predictedViews: number;
    predictedLikes: number;
    predictedShares: number;
    viralPotential: number;
  };
}

// Free AI Content Generator (no API needed)
class FreeAIContentGenerator {
  titleTemplates = [
    "{emotion} moments that will make you {action}",
    "When {subject} gets {emotion} 😍",
    "POV: You're watching {subject} being {emotion}",
    "This {subject} moment hits different",
    "The way {subject} {action} is everything",
    "{emotion} {subject} content we needed",
    "Tell me you felt this {emotion} moment too",
    "{subject} being {emotion} for {duration} straight"
  ];

  emotions = {
    happy: ["smile", "laugh", "feel good", "get happy", "brighten up"],
    funny: ["laugh", "giggle", "crack up", "burst out", "can't stop laughing"],
    emotional: ["cry", "tear up", "feel everything", "get emotional", "touch your heart"],
    romantic: ["swoon", "melt", "fall in love", "get butterflies", "feel the love"]
  };

  subjects = ["couple", "love story", "relationship", "bond", "chemistry", "connection", "moment", "scene"];

  hashtagPools = {
    general: ["#viral", "#trending", "#fyp", "#love", "#couple", "#relationship", "#goals", "#vibes"],
    happy: ["#happiness", "#joy", "#smile", "#positivevibes", "#goodvibes", "#blessed", "#grateful"],
    funny: ["#comedy", "#funny", "#laugh", "#hilarious", "#humor", "#entertainment", "#fun"],
    emotional: ["#emotional", "#feelings", "#touching", "#heartwarming", "#tears", "#deep", "#meaningful"],
    romantic: ["#romance", "#romantic", "#couplegoals", "#relationshipgoals", "#love", "#together", "#soulmate"]
  };

  descriptionTemplates = [
      "This moment captured our hearts! The way they {action} shows pure {emotion}. Can you relate?",
      "When you see {emotion} content like this, you know it's going to be a good day ✨",
      "The {emotion} energy in this clip is unmatched! Who else felt this?",
      "POV: You're watching the most {emotion} content on your feed today",
      "This is why we love {emotion} moments like these. Pure magic! 💫",
      "Tell us this didn't make you feel {emotion} too! The connection is everything.",
      "When {subject} content hits this {emotion}, you know you've found something special"
    ];

    generateContent(emotion: string = 'happy', duration: number = 30): AIGeneratedContent {
      const selectedEmotion = emotion.toLowerCase();
      const emotionActions = this.emotions[selectedEmotion as keyof typeof this.emotions] || this.emotions.happy;
      const titleTemplate = this.titleTemplates[Math.floor(Math.random() * this.titleTemplates.length)];
      const title = titleTemplate
        .replace('{emotion}', selectedEmotion)
        .replace('{action}', emotionActions[Math.floor(Math.random() * emotionActions.length)])
        .replace('{subject}', this.subjects[Math.floor(Math.random() * this.subjects.length)])
        .replace('{duration}', `${duration}s`);
      const descTemplate = this.descriptionTemplates[Math.floor(Math.random() * this.descriptionTemplates.length)];
      const description = descTemplate
        .replace('{emotion}', selectedEmotion)
        .replace('{action}', emotionActions[Math.floor(Math.random() * emotionActions.length)])
        .replace('{subject}', this.subjects[Math.floor(Math.random() * this.subjects.length)]);
      const generalTags = this.hashtagPools.general.slice(0, 3);
      const emotionTags = this.hashtagPools[selectedEmotion as keyof typeof this.hashtagPools] || [];
      const selectedEmotionTags = emotionTags.slice(0, 4);
      const hashtags = [...generalTags, ...selectedEmotionTags];
      const shuffledHashtags = hashtags.sort(() => 0.5 - Math.random()).slice(0, 6);

      return {
        title: this.capitalizeFirst(title),
        description,
        hashtags: shuffledHashtags,
        engagement: this.generateEngagementStats()
      };
    }

    private capitalizeFirst(str: string): string {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    private generateEngagementStats() {
      return {
        predictedViews: this.randomBetween(1000, 50000),
        predictedLikes: this.randomBetween(100, 5000),
        predictedShares: this.randomBetween(10, 500),
        viralPotential: this.randomBetween(65, 98)
      };
    }

    private randomBetween(min: number, max: number): number {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }
}

interface VideoClip {
  url: string;
  filename: string;
  start_time: number;
  end_time: number;
  duration: number;
  score: number;
  srtUrl?: string;
  quality?: string;
  aspect_ratio?: string;
  emotion_filter?: string;
}

// Enhanced Clip Card with AI Content
const EnhancedClipCard: React.FC<{ clip: VideoClip; index: number }> = ({ clip, index }) => {
  const [aiContent, setAiContent] = useState<AIGeneratedContent | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const aiGenerator = new FreeAIContentGenerator();

  const generateAIContent = useCallback(() => {
    setIsGenerating(true);
    // Simulate AI processing time
    setTimeout(() => {
      const content = aiGenerator.generateContent(clip.emotion_filter || 'happy', Math.floor(clip.duration));
      setAiContent(content);
      setIsGenerating(false);
    }, 1000 + Math.random() * 2000); // Random delay for realism
  }, [clip.emotion_filter, clip.duration]);

  useEffect(() => {
    // Auto-generate content when component mounts
    generateAIContent();
  }, [generateAIContent]);

  const copyToClipboard = async (text: string, type: string) => {
    await navigator.clipboard.writeText(text);
    setCopied(type);
    setTimeout(() => setCopied(null), 2000);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const formatNumber = (num: number) => {
    if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'bg-green-500';
    if (score >= 80) return 'bg-yellow-500';
    if (score >= 70) return 'bg-orange-500';
    return 'bg-red-500';
  };

  return (
    <div className="flex flex-col lg:flex-row gap-6 p-6 bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 mb-8">
      {/* Video Section - Left Side */}
      <div className="lg:w-80 flex-shrink-0">
        <div className="relative bg-black rounded-xl overflow-hidden" style={{ aspectRatio: '9/16', maxWidth: '320px', margin: '0 auto' }}>
          {/* Score Badge */}
          <div className={`absolute top-4 right-4 ${getScoreColor(clip.score)} text-white px-3 py-1 rounded-full text-sm font-bold z-10 shadow-lg`}>
            {clip.score.toFixed(0)}%
          </div>

          {/* Processing Info Badges */}
          <div className="absolute top-4 left-4 flex flex-col gap-1 z-10">
            {clip.quality && (
              <div className="bg-blue-500/90 backdrop-blur-sm text-white px-2 py-1 rounded text-xs font-medium">
                {clip.quality}
              </div>
            )}
            {clip.emotion_filter && clip.emotion_filter !== 'all' && (
              <div className="bg-purple-500/90 backdrop-blur-sm text-white px-2 py-1 rounded text-xs font-medium">
                {clip.emotion_filter}
              </div>
            )}
          </div>

          {/* Video */}
          <video
            ref={videoRef}
            src={`http://localhost:5000${clip.url}`}
            className="w-full h-full object-contain"
            controls
            preload="metadata"
            style={{ background: '#000' }}
          >
            {clip.srtUrl && (
              <track
                label="English"
                kind="subtitles"
                srcLang="en"
                src={`http://localhost:5000${clip.srtUrl}`}
                default
              />
            )}
          </video>

          {/* Video Info Overlay */}
          <div className="absolute bottom-4 left-4 right-4">
            <div className="bg-black/60 backdrop-blur-sm rounded-lg p-2 text-white text-sm">
              <div className="flex justify-between items-center">
                <span>{formatTime(clip.start_time)} - {formatTime(clip.end_time)}</span>
                <span className="font-medium">{formatTime(clip.duration)}</span>
              </div>
            </div>
          </div>

          {/* Watermark */}
          <div className="absolute bottom-4 right-4 bg-white/80 backdrop-blur-sm px-2 py-1 rounded text-xs font-bold text-purple-600">
            ShortLoom
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2 mt-4">
          <button
            onClick={() => {
              const link = document.createElement('a');
              link.href = `http://localhost:5000${clip.url}`;
              link.download = clip.filename;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
            }}
            className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white py-2 px-4 rounded-lg font-medium hover:shadow-lg transition-all duration-300 flex items-center justify-center gap-2"
          >
            <Download className="w-4 h-4" />
            Download
          </button>
          <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 p-2 rounded-lg transition-colors">
            <Share2 className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* AI Content Section - Right Side */}
      <div className="flex-1 min-w-0">
        <div className="h-full flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-bold text-gray-900 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              AI Generated Content
            </h3>
            <button
              onClick={generateAIContent}
              className="text-sm bg-purple-100 hover:bg-purple-200 text-purple-700 px-3 py-1 rounded-full transition-colors"
            >
              {isGenerating ? 'Generating...' : 'Regenerate'}
            </button>
          </div>

          {isGenerating ? (
            <div className="flex-1 bg-gradient-to-br from-amber-50 to-orange-100 rounded-xl p-6 flex items-center justify-center">
              <div className="text-center">
                <div className="animate-spin w-8 h-8 border-3 border-orange-300 border-t-orange-500 rounded-full mx-auto mb-3"></div>
                <p className="text-orange-700 font-medium">Generating AI content...</p>
              </div>
            </div>
          ) : aiContent ? (
            <div className="flex-1 space-y-4">
              {/* Title Section */}
              <div className="bg-gradient-to-br from-amber-50 to-orange-100 rounded-xl p-4 border border-orange-200">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <FileText className="w-4 h-4 text-orange-600" />
                    <span className="text-sm font-medium text-orange-800">Title</span>
                  </div>
                  <button
                    onClick={() => copyToClipboard(aiContent.title, 'title')}
                    className="text-orange-600 hover:text-orange-700 p-1"
                  >
                    <Copy className="w-3 h-3" />
                  </button>
                </div>
                <p className="text-orange-900 font-medium leading-relaxed">
                  {aiContent.title}
                </p>
                {copied === 'title' && (
                  <span className="text-xs text-green-600 font-medium">Copied!</span>
                )}
              </div>

              {/* Description Section */}
              <div className="bg-gradient-to-br from-amber-50 to-orange-100 rounded-xl p-4 border border-orange-200">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <MessageCircle className="w-4 h-4 text-orange-600" />
                    <span className="text-sm font-medium text-orange-800">Description</span>
                  </div>
                  <button
                    onClick={() => copyToClipboard(aiContent.description, 'description')}
                    className="text-orange-600 hover:text-orange-700 p-1"
                  >
                    <Copy className="w-3 h-3" />
                  </button>
                </div>
                <p className="text-orange-900 leading-relaxed">
                  {aiContent.description}
                </p>
                {copied === 'description' && (
                  <span className="text-xs text-green-600 font-medium">Copied!</span>
                )}
              </div>

              {/* Hashtags Section */}
              <div className="bg-gradient-to-br from-amber-50 to-orange-100 rounded-xl p-4 border border-orange-200">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <Hash className="w-4 h-4 text-orange-600" />
                    <span className="text-sm font-medium text-orange-800">Hashtags</span>
                  </div>
                  <button
                    onClick={() => copyToClipboard(aiContent.hashtags.join(' '), 'hashtags')}
                    className="text-orange-600 hover:text-orange-700 p-1"
                  >
                    <Copy className="w-3 h-3" />
                  </button>
                </div>
                <div className="flex flex-wrap gap-2">
                  {aiContent.hashtags.map((tag, idx) => (
                    <span
                      key={idx}
                      className="bg-orange-200 text-orange-800 px-2 py-1 rounded-full text-sm font-medium cursor-pointer hover:bg-orange-300 transition-colors"
                      onClick={() => copyToClipboard(tag, `tag-${idx}`)}
                    >
                      {tag}
                    </span>
                  ))}
                </div>
                {copied === 'hashtags' && (
                  <span className="text-xs text-green-600 font-medium mt-1 block">All hashtags copied!</span>
                )}
              </div>

              {/* Engagement Prediction */}
              <div className="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-xl p-4 border border-blue-200">
                <div className="flex items-center gap-2 mb-3">
                  <TrendingUp className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium text-blue-800">Engagement Prediction</span>
                </div>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="bg-white/60 rounded-lg p-2 text-center">
                    <div className="font-bold text-blue-900">{formatNumber(aiContent.engagement.predictedViews)}</div>
                    <div className="text-blue-700 text-xs">Views</div>
                  </div>
                  <div className="bg-white/60 rounded-lg p-2 text-center">
                    <div className="font-bold text-blue-900">{formatNumber(aiContent.engagement.predictedLikes)}</div>
                    <div className="text-blue-700 text-xs">Likes</div>
                  </div>
                  <div className="bg-white/60 rounded-lg p-2 text-center">
                    <div className="font-bold text-blue-900">{formatNumber(aiContent.engagement.predictedShares)}</div>
                    <div className="text-blue-700 text-xs">Shares</div>
                  </div>
                  <div className="bg-white/60 rounded-lg p-2 text-center">
                    <div className="font-bold text-blue-900">{aiContent.engagement.viralPotential}%</div>
                    <div className="text-blue-700 text-xs">Viral Potential</div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </div>
  );
};

// Updated Generated Shorts Section
const EnhancedGeneratedShorts: React.FC<{ clips: VideoClip[] }> = ({ clips }): React.ReactElement => {
  if (clips.length === 0) return <></>;

  return (
    <section className="py-16 px-4 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold mb-4 text-gray-900">
            Your Generated Shorts
          </h2>
          <p className="text-xl text-gray-600">
            AI found {clips.length} amazing moments in your video with smart content suggestions
          </p>
        </div>
        <div className="space-y-8">
          {clips.map((clip, index) => (
            <EnhancedClipCard key={index} clip={clip} index={index} />
          ))}
        </div>
      </div>
    </section>
  );
};

export default EnhancedGeneratedShorts;
// --- End pasted code ---
